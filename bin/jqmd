#!/usr/bin/env bash
# ---
# This file is automatically generated from jqmd.md - DO NOT EDIT
# ---

# MIT License
#
# Copyright (c) 2017 PJ Eby
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy,
# modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
# is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

mdsh_raw_bash_runtime+=($'#!/usr/bin/env bash\n\n# --- BEGIN jqmd runtime ---\n')
mdsh_raw_bash_runtime+=($'jqmd_imports=\njqmd_filters=\njqmd_defines=\n\nHAVE_FILTERS() { [[ ${jqmd_filters-} ]]; }\nCLEAR_FILTERS() { unset jqmd_filters; }\n\nIMPORTS() { jqmd_imports+="${jqmd_imports:+$\'\\n\'}$1"; }\nDEFINE()  { jqmd_defines+="${jqmd_defines:+$\'\\n\'}$1"; }\nFILTER()  { jqmd_filters+="${jqmd_filters:+|}$1"; }\n')
mdsh_raw_bash_runtime+=($'JQOPTS=(jq)\nJQ_OPTS() { JQOPTS+=("$@"); }\nARG()     { JQ_OPTS --arg     "$1" "$2"; }\nARGJSON() { JQ_OPTS --argjson "$1" "$2"; }\n')
mdsh_raw_bash_runtime+=($'RUN_JQ() {\n    local opt nargs cmd=(jq); set -- "${JQOPTS[@]:1}" "$@"\n\n    while (($#)); do\n        case "$1" in\n        -{f,-fromfile})                     nargs=2 ; FILTER "$(<"$2")" ;;\n        -{L,-indent})                       nargs=2 ;;\n        --{arg,arjgson,slurpfile,argfile})  nargs=3 ;;\n        --)  break   ;; # rest of args are data files\n        -*)  nargs=1 ;;\n        *)   FILTER "$1"; break ;; # jq program: data files follow\n        esac\n        cmd+=("${@:1:$nargs}")    # add $nargs args to cmd\n        shift $nargs\n    done\n\n    HAVE_FILTERS || FILTER .    # jq needs at least one filter expression\n\n    "${cmd[@]}" -f <(\n        printf "%s\\n" "${jqmd_imports-}" "${jqmd_defines-}" "${jqmd_filters-}"\n    ) "${@:2}"\n\n    CLEAR_FILTERS   # cleanup for any re-runs\n}\n')
mdsh_raw_bash_runtime+=($'YAML()    { JSON "$(echo "$1" | yaml2json /dev/stdin)"; }\nJSON()    { FILTER "jqmd_data($1)"; }\n\ncommand -v yaml2json >/dev/null || yaml2json() {\n    python -c \'import sys, yaml, json; json.dump(yaml.safe_load(sys.stdin), sys.stdout, indent=4)\';\n}\n\n# --- END jqmd runtime ---\n')
# Language Support
mdsh-compile-jq()         { printf 'FILTER  %q\n' "$1"; }
mdsh-compile-jq_defs()    { printf 'DEFINE  %q\n' "$1"; }
mdsh-compile-jq_imports() { printf 'IMPORTS %q\n' "$1"; }

mdsh-compile-yml()  { printf 'JSON %q\n' "$(echo "$1" | yaml2json /dev/stdin)"; }
mdsh-compile-yaml() { printf 'JSON %q\n' "$(echo "$1" | yaml2json /dev/stdin)"; }
mdsh-compile-json() { printf 'JSON %q\n' "$1"; }

const() {
    case "${tag_words-}" in
    yaml|yml) printf "DEFINE %q\n" "def $1: $(echo "$block"|yaml2json /dev/stdin) ;" ;;
    json)     printf "DEFINE %q\n" "def $1: $block ;" ;;
    *) mdsh-error "Invalid language for constant: '%s'" "${tag_words-}"
    esac
}
# Load the runtime so it's usable by mdsh
printf -v REPLY '%s\n' "${mdsh_raw_bash_runtime[@]}"; eval "$REPLY"

# Add runtime to the top of compiled scripts
printf -v REPLY 'mdsh:file-header() { echo -n %q; }' "$REPLY"; eval "$REPLY"

# Ensure scripts process any leftover filters at end
mdsh:file-footer() { echo 'if [[ $0 == $BASH_SOURCE ]] && HAVE_FILTERS; then RUN_JQ; fi'; }
set -euo pipefail  # Strict mode
mdsh-parse() {
    local cmd=$1 lang block ln indent fence close_fence indent_remove
    local open_fence='^( {0,3})(~~~+|```+) *([^`]*)$'
    while IFS= read -r ln; do
        if [[ $ln =~ $open_fence ]]; then
            indent=${BASH_REMATCH[1]} fence=${BASH_REMATCH[2]} lang=${BASH_REMATCH[3]} block=
            close_fence="^( {0,3})$fence+ *\$" indent_remove="^${indent// / ?}"
            while IFS= read -r ln && ! [[ $ln =~ $close_fence ]]; do
                ! [[ $ln =~ $indent_remove ]] || ln=${ln#$BASH_REMATCH}; block+=$ln$'\n'
            done
            lang="${lang%"${lang##*[![:space:]]}"}"; $cmd fenced "$lang" "$block";
        fi
    done
}
mdsh-source() {
    if [[ ${1:--} != '-' ]]; then
         mdsh-parse __COMPILE__ <"$1"
    else mdsh-parse __COMPILE__
    fi
}
mdsh-compile() (  # <-- force subshell to prevent escape of compile-time state
    mdsh-source "$@"
)
__COMPILE__() {
    [[ $1 == fenced && $fence == '```' && ! $indent ]] || return 0  # only unindented ``` code
    local lang="${2//[^_[:alnum:]]/_}"; # convert language to safe variable/function name
    local tag_words=($2);  # check for command blocks first
    if [[ ${tag_words[1]-} == '!'* ]]; then
        set -- "$3" "$2"; eval "${2#*!}"; return
    elif [[ ${tag_words[1]-} == '|'* ]]; then
        echo "${2#*|} <<'\`\`\`'"; printf '%s```\n' "$3"; return
    elif fn-exists mdsh-lang-$lang; then
        mdsh-rewrite mdsh-lang-$lang "{" "} <<'\`\`\`'"; printf '%s```\n' "$3"
    elif fn-exists mdsh-compile-$lang; then
        mdsh-compile-$lang "$3"
    else
        mdsh-misc "$2" "$3"
    fi

    if fn-exists mdsh-after-$lang; then
        mdsh-rewrite mdsh-after-$lang
    fi
}
# fn-exists: succeed if argument is a function
fn-exists() { declare -F -- "$1"; } >/dev/null
# Output body of func $1, optionally replacing the opening/closing { and } with $2 and $3
mdsh-rewrite() {
    declare -f $1 | sed -e '1d; 2s/^{ $/'"${2-"{"}"'/; $s/^}$/'"${3-"\}"}"'/'
}
mdsh-misc()          { mdsh-data "$@"; }    # Treat unknown languages as data
mdsh-compile-()      { :; }                 # Ignore language-less blocks

mdsh-compile-mdsh()  { eval "$1"; }         # Execute `mdsh` blocks in-line
mdsh-compile-mdsh_main() { [[ $MDSH_MODULE ]] || eval "$1"; }

mdsh-compile-shell() { printf '%s' "$1"; }  # Copy `shell` blocks to the output
mdsh-compile-shell_main() { [[ $MDSH_MODULE ]] || printf '%s' "$1"; }
mdsh-data() {
    printf "mdsh_raw_${1//[^_[:alnum:]]/_}+=(%q)\n" "$2"
}
mdsh-compile-shell_mdsh() {
    indent= fence='```' __COMPILE__ fenced mdsh "$1"
}
mdsh-compile-shell_mdsh_main() {
    indent= fence='```' __COMPILE__ fenced "mdsh main" "$1"
}
# Main program: check for arguments and run markdown script
mdsh-main() {
    (($#)) || mdsh-error "Usage: %s [--out FILE] [ --compile | --eval ] markdownfile [args...]" "${0#*/}"
    case "$1" in
    --) mdsh-interpret "${@:2}" ;;
    --*|-?) fn-exists "mdsh.$1" || mdsh-error "%s: unrecognized option: %s" "${0#*/}" "$1"
        "mdsh.$1" "${@:2}"
        ;;
    -??*) mdsh-main "${1::2}" "-${1:2}" "${@:2}" ;;  # split '-abc' into '-a -bc' and recurse
    *)  mdsh-interpret "$@" ;;
    esac
}
# Run markdown file as main program, with $0 == $BASH_SOURCE == "" and
# MDSH_ZERO pointing to the original $0.

function mdsh-interpret() {
    printf -v cmd 'eval "$(%q --compile %q)"' "$0" "$1"
    MDSH_ZERO="$1" exec bash -c "$cmd" "" "${@:2}"
}
mdsh.--compile() {
    (($#)) || mdsh-error "Usage: %s --compile FILENAME..." "${0#*/}"
    ! fn-exists mdsh:file-header || mdsh:file-header
    for REPLY; do MDSH_SOURCE=$REPLY mdsh-compile "$REPLY"; done
    ! fn-exists mdsh:file-footer || mdsh:file-footer
}

mdsh.-c() { mdsh.--compile "$@"; }
mdsh.--eval() {
    (($# == 1)) && [[ $1 != - ]] ||
        mdsh-error "Usage: %s --eval FILENAME" "${0#*/}"
    mdsh.--compile "$1"
    echo $'__status=$? eval \'return $__status || exit $__status\' 2>/dev/null'
}

mdsh.-E() { mdsh.--eval "$@"; }
mdsh.--out() {
    if REPLY=("$(mdsh-main "${@:2}")"); then
        echo "$REPLY" >"$1";
    else exit $?;
    fi
}

mdsh.-o() { mdsh.--out "$@"; }
# mdsh-error: printf args to stderr and exit w/EX_USAGE (code 64)
mdsh-error() { printf "$1\n" "${@:2}" >&2; exit 64; }
mdsh.--help() {
    printf "Usage: %s [--out FILE] [ --compile | --eval ] markdownfile [args...]\n" "${0#*/}"
    echo -e '
Run and/or compile code blocks from markdownfile(s) to bash.
Use a filename of `-` to run or compile from stdin.

Options:
  -h, --help                Show this help message and exit
  -c, --compile MDFILE...   Compile MDFILE(s) to bash and output on stdout.
  -E, --eval MDFILE         Compile one file w/a shelldown-support footer line\n'
}

mdsh.-h() { mdsh.--help "$@"; }
MDSH_LOADED_MODULES=
MDSH_MODULE=

@import() {
    if ! [[ $MDSH_LOADED_MODULES == *"<$1>"* ]]; then
        MDSH_LOADED_MODULES+="<$1>"; local MDSH_MODULE=$1
        "${@:2}"
    fi
}
@module() {
    ! [[ $MDSH_MODULE ]] || return 0
    set -- "${1:-${MDSH_SOURCE-}}"
    echo "#!/usr/bin/env bash"
    echo "# ---"
    echo "# This file is automatically generated from ${1##*/} - DO NOT EDIT"
    echo "# ---"
    echo
}
@main() {
    ! [[ $MDSH_MODULE ]] || return 0
    echo '# --- All functions have been defined, main script starts here! ---'
    echo 'if [[ $0 == "$BASH_SOURCE" ]]; then '"$1"' "$@"; fi'
}
@comment() {
    [[ $MDSH_MODULE ]] || (
        ! [[ "${MDSH_SOURCE-}" == */* ]] || cd "${MDSH_SOURCE%/*}"
        sed -e 's/^\(.\)/# \1/; s/^$/#/;' "$@"
        echo
    )
}
mdsh-embed() {
    local f=$1 base=${1##*/}; local boundary="# --- EOF $base ---" contents ctr=
    [[ $f == */* && -f $f ]] || f=$(command -v "$f") || {
        echo "Can't find module $1" >&2; return 69  # EX_UNAVAILABLE
    }
    contents=$'\n'$(<"$f")$'\n'
    while [[ $contents == *$'\n'"$boundary"$'\n'* ]]; do
        let ctr++; boundary="# --- EOF $base.$ctr ---"
    done
    printf $'{ if [[ $OSTYPE != cygwin && $OSTYPE != msys && -e /dev/fd/0 ]]; then source /dev/fd/0; else source <(cat); fi; } <<\'%s\'%s%s\n' "$boundary" "$contents" "$boundary"
}
mdsh-make() {
    [[ -f "$2" && "$(stat -c %y "$1")" == "$(stat -c %y "$2")" ]] || (
        "${@:3}" && mdsh-main --out "$2" --compile "$1" && touch -r "$1" "$2"
    )
}
# run-markdown file args...
# Compile `file` and source the result, passing along any positional arguments
run-markdown() { source <(mdsh-source "${1--}") "${@:2}"; }
# --- All functions have been defined, main script starts here! ---
if [[ $0 == "$BASH_SOURCE" ]]; then mdsh-main "$@"; fi
